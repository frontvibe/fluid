import fs from 'node:fs';
import {getCliClient} from 'sanity/cli';

import {SINGLETONS} from '../structure/singletons';
import {initialDocumentsValues} from './initial-documents-values';
import {initialSingletonsValues} from './initial-singletons-values';

type JsonCache =
  | {
      description: string;
      projectId: string;
    }
  | null
  | undefined;

const client = getCliClient();
const projectId = client.config().projectId;
const JSON_FILE_PATH = './app/sanity/scripts/cache.json';

if (!projectId) {
  // eslint-disable-next-line no-console
  console.log('❌ Project ID not found. Exiting...');
  process.exit(0);
}

let jsonCache: JsonCache = {
  projectId: '',
  description: '',
};

if (fs.existsSync(JSON_FILE_PATH)) {
  const data = JSON.parse(fs.readFileSync(JSON_FILE_PATH, 'utf8')) as JsonCache;

  if (data?.projectId) {
    jsonCache = data;
  }
}

if (jsonCache.projectId === projectId) {
  process.exit(0);
} else {
  jsonCache.description =
    'This file is automatically generated for cache purposes';
  jsonCache.projectId = projectId;

  fs.writeFileSync(JSON_FILE_PATH, JSON.stringify(jsonCache, null, 2));
}

async function createSingletons() {
  const singletonsArray = Object.values(SINGLETONS);

  const singletons = singletonsArray
    .map((singleton) => {
      return [
        {
          _id: `${singleton.id}`,
          _type: singleton._type,
          ...initialSingletonsValues[
            singleton.id as keyof typeof initialSingletonsValues
          ],
        },
      ];
    })
    .flat();

  const transaction = client.transaction();

  singletons.forEach((doc: any) => {
    transaction.createIfNotExists(doc);
  });

  initialDocumentsValues.forEach((doc: any) => {
    transaction.createIfNotExists(doc);
  });

  await transaction
    .commit()
    .then((res) => {
      // eslint-disable-next-line no-console
      console.log('✔ Singletons created successfully!');
    })
    .catch((err) => {
      console.error(err);
    });
}

createSingletons();
